package org.mikesoft.winsearch.sql;

import com.sun.jna.platform.win32.COM.COMInvokeException;
import org.mikesoft.winsearch.ado.COMFactory;
import org.mikesoft.winsearch.ado.ADORecordset;

import java.sql.*;

/**
 * Implementation of {@link Statement}
 */
public class WinSearchStatement implements Statement {
    private final WinSearchConnection connection;
    private WinSearchResultSet resultSet;

    public WinSearchStatement(WinSearchConnection connection) {
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        ADORecordset rs = COMFactory.newRecordSet();
        try {
            rs.open(sql, connection.getAdoConnection(),
                    ADORecordset.CursorTypeEnum.adOpenStatic,
                    ADORecordset.LockTypeEnum.adLockReadOnly,
                    ADORecordset.adCmdUnspecified);
        } catch (COMInvokeException e) {
            if (e.getHresult().intValue() == 0x80020009)
                throw new WinSearchSQLException("Error of retrieving data from SQL: possibly faulty SQL query\n" + sql);
            throw new RuntimeException(e);
        }
        if (!rs.isBOF()) rs.move(-1);
        resultSet = new WinSearchResultSet(rs, this);
        return resultSet;
    }

    /**
     * Unsupported
     */
    @Override
    public int executeUpdate(String sql) {
        return 0;
    }

    @Override
    public void close() throws SQLException {
        if (resultSet != null) resultSet.close();
    }

    @Override
    public int getMaxFieldSize() {
        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) {

    }

    @Override
    public int getMaxRows() {
        return 0;
    }

    @Override
    public void setMaxRows(int max) {

    }

    @Override
    public void setEscapeProcessing(boolean enable) {
    }

    @Override
    public int getQueryTimeout() {
        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) {

    }

    @Override
    public void cancel() {

    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {

    }

    @Override
    public void setCursorName(String name) {
    }

    /**
     * Unsupported
     */
    @Override
    public boolean execute(String sql) {
        return false;
    }

    /**
     * @return {@link WinSearchResultSet}
     */
    @Override
    public ResultSet getResultSet() {
        return resultSet;
    }

    @Override
    public int getUpdateCount() {
        return 0;
    }

    @Override
    public boolean getMoreResults() {
        return false;
    }

    @Override
    public void setFetchDirection(int direction) {
    }

    @Override
    public int getFetchDirection() {
        return ResultSet.FETCH_FORWARD;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {

    }

    @Override
    public int getFetchSize() throws SQLException {
        return 0;
    }

    @Override
    public int getResultSetConcurrency() {
        return ResultSet.CONCUR_READ_ONLY;
    }

    @Override
    public int getResultSetType() {
        return ResultSet.TYPE_FORWARD_ONLY;
    }

    @Override
    public void addBatch(String sql) {

    }

    @Override
    public void clearBatch() {

    }

    @Override
    public int[] executeBatch() {
        return new int[0];
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) {
        return false;
    }

    @Override
    public ResultSet getGeneratedKeys() {
        return null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) {
        return 0;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) {
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) {
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) {
        return false;
    }

    @Override
    public int getResultSetHoldability() {
        return 0;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) {

    }

    @Override
    public boolean isPoolable() {
        return false;
    }

    /**
    * Unsupported
    */
    @Override
    public void closeOnCompletion() {

    }

    @Override
    public boolean isCloseOnCompletion() {
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) {
        return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        return false;
    }
}
